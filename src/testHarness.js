const {PostgreSqlContainer} = require('@testcontainers/postgresql');
const {sessionStarter} = require("./sessionStarter");

const puzzleTable = `CREATE TABLE IF NOT EXISTS public.puzzles
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    name text COLLATE pg_catalog."default",
    owner text COLLATE pg_catalog."default" NOT NULL,
    deleted boolean DEFAULT false,
    CONSTRAINT puzzles_pkey PRIMARY KEY (id)
)`;

const puzzleAnswerTable = `CREATE TABLE IF NOT EXISTS public.puzzle_answers
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    value text COLLATE pg_catalog."default",
    puzzle bigint,
    answer_index integer NOT NULL,
    CONSTRAINT "puzzleAnswers_pkey" PRIMARY KEY (id),
    CONSTRAINT "puzzleKey" FOREIGN KEY (puzzle)
        REFERENCES public.puzzles (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE NO ACTION
        NOT VALID
)`;

async function testingStart() {
  let postgresContainer = await new PostgreSqlContainer().start();
  const connectionUri = postgresContainer.getConnectionUri();
  const pg = await sessionStarter(connectionUri);

  await pg.query(puzzleTable);
  await pg.query(puzzleAnswerTable)

  return {
    dataAccess: pg,
    teardown: async () => {
      await pg.end();
      await postgresContainer.stop();
    }
  }
}

exports.testingStart = testingStart;
